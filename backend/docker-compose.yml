version: '3.8'

services:
  # 小雪宝后端API服务
  xiaoxuebao-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: xiaoxuebao-api
    ports:
      - "8000:8000"
    environment:
      # 数据库配置
      - DATABASE_URL=postgresql://${POSTGRES_USER:-xiaoxuebao}:${POSTGRES_PASSWORD:-xiaoxuebao123}@postgres:5432/${POSTGRES_DB:-xiaoxuebao}
      
      # Redis配置
      - REDIS_URL=redis://:${REDIS_PASSWORD:-xiaoxuebao123}@redis:6379/0
      
      # Elasticsearch配置
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      
      # 安全配置
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-in-production}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # 应用配置
      - APP_NAME=小雪宝AI助手
      - APP_VERSION=1.0.0
      - DEBUG=false
      - TESTING=false
      
      # CORS配置
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      
      # 日志配置
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # 性能配置
      - WORKERS=4
      - MAX_CONNECTIONS=100
      - POOL_SIZE=20
      - POOL_OVERFLOW=30
      
      # 缓存配置
      - CACHE_TTL=3600
      - CACHE_MAX_SIZE=1000
      
      # 限流配置
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      
      # 文件上传配置
      - MAX_FILE_SIZE=10485760  # 10MB
      - UPLOAD_PATH=/app/uploads
    
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./static:/app/static
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: xiaoxuebao-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-xiaoxuebao}
      - POSTGRES_USER=${POSTGRES_USER:-xiaoxuebao}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-xiaoxuebao123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backup:/backup
    
    ports:
      - "5432:5432"
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-xiaoxuebao} -d ${POSTGRES_DB:-xiaoxuebao}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: xiaoxuebao-redis
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-xiaoxuebao123}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    ports:
      - "6379:6379"
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch 搜索引擎
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: xiaoxuebao-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=xiaoxuebao-cluster
      - node.name=xiaoxuebao-node
      - bootstrap.memory_lock=true
      - indices.query.bool.max_clause_count=10000
    
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/config:/usr/share/elasticsearch/config:ro
    
    ports:
      - "9200:9200"
      - "9300:9300"
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    
    # 内存锁定
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: xiaoxuebao-nginx
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    
    depends_on:
      - xiaoxuebao-api
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: xiaoxuebao-prometheus
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped

  # Grafana 仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: xiaoxuebao-grafana
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - prometheus
    
    networks:
      - xiaoxuebao-network
    
    restart: unless-stopped

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络
networks:
  xiaoxuebao-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
