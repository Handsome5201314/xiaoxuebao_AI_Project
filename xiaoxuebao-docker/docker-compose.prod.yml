version: '3.8'

services:
  # Nginx 反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    container_name: xiaoxuebao-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/web-app/out:/usr/share/nginx/html/app:ro
      - ./frontend/web-admin/build:/usr/share/nginx/html/admin:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web-app
      - web-admin
      - api-gateway
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 用户前端 (生产环境)
  web-app:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile.prod
    container_name: xiaoxuebao-web-app-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://your-domain.com
    volumes:
      - ./frontend/web-app:/app
      - /app/node_modules
      - /app/.next
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 管理后台 (生产环境)
  web-admin:
    build:
      context: ./frontend/web-admin
      dockerfile: Dockerfile.prod
    container_name: xiaoxuebao-web-admin-prod
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://your-domain.com
    volumes:
      - ./frontend/web-admin:/app
      - /app/node_modules
      - /app/build
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # API网关 (生产环境)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.prod
    container_name: xiaoxuebao-api-gateway-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 知识库服务 (生产环境)
  knowledge-service:
    build:
      context: ./services/knowledge-service
      dockerfile: Dockerfile.prod
    container_name: xiaoxuebao-knowledge-service-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LLM_API_KEY=${LLM_API_KEY}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # 搜索服务 (生产环境)
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile.prod
    container_name: xiaoxuebao-search-service-prod
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
      - LLM_API_KEY=${LLM_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      - elasticsearch
      - redis
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 用户服务 (生产环境)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.prod
    container_name: xiaoxuebao-user-service-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # PostgreSQL 数据库 (生产环境)
  postgres:
    image: postgres:15-alpine
    container_name: xiaoxuebao-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis 缓存 (生产环境)
  redis:
    image: redis:7-alpine
    container_name: xiaoxuebao-redis-prod
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Elasticsearch 搜索引擎 (生产环境)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: xiaoxuebao-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - xiaoxuebao-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: xiaoxuebao-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - xiaoxuebao-network
    restart: always
    profiles:
      - monitoring

  # 日志收集 (可选)
  filebeat:
    image: elastic/filebeat:8.11.0
    container_name: xiaoxuebao-filebeat
    volumes:
      - ./logs:/var/log/xiaoxuebao:ro
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    networks:
      - xiaoxuebao-network
    restart: always
    profiles:
      - monitoring

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  elasticsearch_data_prod:
    driver: local
  prometheus_data:
    driver: local

networks:
  xiaoxuebao-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
